#####################################################################
#   Macros
#####################################################################



[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    {% set filamentTable = {'ASA': 45, 'ABS': 40, 'NYLON': 45,'PC': 50,POM:50 } %}
    {% if 'EXTRUDER' in params %}
      {% set EXTRUDER_TEMP = params.EXTRUDER|float %}
    {% elif 'EXTRUDER_TEMP' in params %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    {% elif 'HOTEND' in params %}
      {% set EXTRUDER_TEMP = params.HOTEND|float %}
    {% else %}
      {% set EXTRUDER_TEMP = 210|float %}
    {% endif %}
    {% if 'BED' in params %}
      {% set BED_TEMP = params.BED|float %}
    {% elif 'BED_TEMP' in params %}
      {% set BED_TEMP = params.BED_TEMP|float %}    
    {% else %}
      {% set BED_TEMP = 60|float %}
    {% endif %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|float %}
    {% if CHAMBER_TEMP == 0 %}
      {% set FILAMENT = params.FILAMENT|default("NONE")|string %}      
      {% if FILAMENT in filamentTable %}
        {% set CHAMBER_TEMP = filamentTable[FILAMENT] %}      
      {% endif %}  
    {% endif %}
    {% set mid_x = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set mid_y = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}

    { action_respond_info("Filament temp: " + EXTRUDER_TEMP|string + ", bed: " + BED_TEMP|string + " chamber: " + CHAMBER_TEMP|string) }
    G90 ; absolute
    M83 ; E relative    
    G92 E0
    G28 PROBE_LOCK
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}   
    M106 S255
    {% if printer.configfile.config["z_tilt"]|default(-1)|int == 0 %} # for V2
    Z_TILT_ADJUST    
    {% endif %}
    {% if printer.configfile.config["quad_gantry_level"]|default(-1)|int == 0 %} # for Trident
    QUAD_GANTRY_LEVEL
    {% endif %}
    G28 Z
    {% if CHAMBER_TEMP >= 30 and printer.extruder.temperature < 30 %}        
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110        
        G0 F300
        G1 X{mid_x} Y{mid_y} Z80 F6000
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={CHAMBER_TEMP}        
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
        G1 X1 Y1 F6000
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=100
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM=100        
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=100
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM=100       
    {% endif %}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    
    DOCK_PROBE_UNLOCK
    M106 S0
    ; intro line
    G1 Z20 F3000    
    G1 X100 Y0 F6000
    G1 X0 Y0 F6000
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
    G92 E0 
    G1 Z0.2 F300
    G1 E15.0 F150
    G1 X80.0 E40.0 F150
    G1 X200.0 E10.0 F200    
    G0 X201.0 F700
    G1 E-0.6 F3000    
    G1 X219 Z5 F12000
    G1 E0.5 F1000
    G92 E0.0
    M82  ; E absolute

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear    
    G91                            ; relative positioning
    G92 E0                         ; zero the extruder
    M83                            ; E relative 
    G1 E-1 F3600                 ; retract filament
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    #G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS    
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X{max_x - 10} Y{max_y - 10} F3600          ; park nozzle at rear
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={printer.extruder.temperature - 10}
    G1 E-35 F300                ; retract filament    bylo -4mm na dragonu
    M82  ; E absolute
    G92 E0                         ; zero the extruder
    M84 ; turn off motors
    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM=65





[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 20.0) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SET_IDLE_TIMEOUT TIMEOUT=86400
    PAUSE_BASE    
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X1 Y1 F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT=1800 
    RESUME_BASE {get_params}    


[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE    
    RESTORE_GCODE_STATE NAME=M600_state    


[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  # get accel from parameter
  {% if 'S' in params %}
    {% set param_accel = params.S|float %}
  {% elif 'P' in params %}
    {% set param_accel = params.P|float %}
  {% elif 'T' in params %}
    {% set param_accel = params.T|float %}
  {% endif %}
  # calc accel_to deccel
  {% set param_accel_to_decel = (param_accel / 2.0) %}
  # get limits from config
  {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
  {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
  # limit values to config values 
  {% if param_accel < max_accel %}
    {% set accel = param_accel|int %}
  {% else %}
    {% set accel = max_accel|int %}
  {% endif%}
  {% if param_accel_to_decel < max_accel_to_decel %}
    {% set accel_to_decel = param_accel_to_decel|int %}
  {% else %}
    {% set accel_to_decel = max_accel_to_decel|int %}
  {% endif %}
  # end of definition
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    M400                           ; wait for buffer to clear    
    G91                            ; relative positioning
    G92 E0                         ; zero the extruder
    M83                            ; E relative 
    G1 E-1 F3600                 ; retract filament
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    #G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS    
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X{max_x - 10} Y{max_y - 10} F3600          ; park nozzle at rear
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={printer.extruder.temperature - 10}
    G1 E-35 F300                ; retract filament    bylo -4mm na dragonu
    M82  ; E absolute
    G92 E0                         ; zero the extruder
    M84 ; turn off motors
    CANCEL_PRINT_BASE



[gcode_macro PA_CAL]
# Pressure Advance Simple Test macro, using .4mm nozzle.
# Usage: PA_CAL BED=100 EXTRUDER=240 START=0 MAX=0.1
# First prints a line with current set PA, then prints 20 line segments
# starting with 0 PA, increasing each line by 0.005.
 
gcode:
    {% set BED = params.BED|default(65) |float %}
    {% set EXTRUDER = params.EXTRUDER|default(210) |float %}
    {% set PA_start = params.START|default(0) |float %}
    {% set PA_max = params.MAX|default(0.1) |float %}
 
    {% set PA_factor = PA_max / 20 |float %}
 
    {% set mid_x = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set mid_y = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
 
    {% set x_start = mid_x - 40 | float %}
    {% set x_p1 = mid_x - 20 | float %}
    {% set x_p2 = mid_x + 20 | float %}
    {% set x_p3 = mid_x + 40 | float %}
 
    {% set y_base = mid_y - 50 | float %}
 
    PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
 
    G21 ; Millimeter units
    G90 ; Absolute XYZ
    M83 ; Relative E
    SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
    G92 E0
    M106 S0
 
    {% for i in range(0, 20) %}
      SET_PRESSURE_ADVANCE ADVANCE={PA_start + i*PA_factor} ; set Pressure Advance
      M117 {i}: Testing Pressure Advance at: {PA_start + i*PA_factor}
      M118 {i}: Testing Pressure Advance at: {PA_start + i*PA_factor}
      G0 X{x_start} Y{y_base+(5*i)} F30000                  ; move to start position
      G0 Z0.25 F300                                         ; move to layer height
      G1 E0.75 F1800                                        ; un-retract
      G1 X{x_p1} Y{y_base+(5*i)} E0.91798 F300              ; print line part one
      G1 X{x_p2} Y{y_base+(5*i)} E1.83596 F9000             ; print line part two
      G1 X{x_p3} Y{y_base+(5*i)} E0.91798 F300              ; print line part three
      G1 E-0.75 F1800                        ; retract
      G0 Z1 F300                             ; Move above layer height
    {% endfor %}
 
    M118 Find best line and multiply it by ({PA_start} + line * {PA_factor}) to find your PA setting.
 
    PRINT_END    

[gcode_macro SPEED_TEST]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set feed = params.FEED|default(300)|int * 60%}
    {% set accel = params.ACCEL|default(5000)|int %}
    # {% set accel2deccel = params.AccelToDeccel|default(accel/2)|int %}

    {% set border_delta = 20 %}

    {% set min_x = 0 + border_delta %}
    {% set min_y = 0 + border_delta%}
    {% set max_x = 300 - border_delta%}
    {% set max_y = 300 - border_delta %}

    # SAVE_GCODE_STATE NAME=SPEED_TEST
    G28 X Y
    GET_POSITION
    G90
    # SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel2deccel}
    M204 S{accel}
    M117 Accel Set
    G4 P500 ; wait half a second
    {% for iteration in range(i|int) %}
        G1 X{min_x} Y{min_y} F{feed}
        G1 X{max_x} Y{max_y}
        G1 X{min_x} Y{min_y}
        G1 X{max_x} Y{max_y} 

        G1 X{min_x} Y{max_y}

        G1 X{max_x} Y{min_y}
        G1 X{min_x} Y{max_y}
        G1 X{max_x} Y{min_y}
        G1 X{min_x} Y{max_y}

        G1 X{min_x} Y{min_y}
        G1 X{max_x} Y{min_y}
        G1 X{max_x} Y{max_y}
        G1 X{min_x} Y{max_y}
        G1 X{min_x} Y{min_y}
    {% endfor %}
    G28 X Y
    GET_POSITION
    # RESTORE_GCODE_STATE NAME=SPEED_TEST
        